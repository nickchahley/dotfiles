" {{{ Description
" 	Started making it. Had a breakdown. Bon appetite.
" 	nikoli's vimrc, started 2015
" 	Local vim dir $VIMHOME = ~/.vim/  (nix), ~\vimfiles (win)
" }}}
" {{{ Remap Leader before we use it for anything else
	let mapleader = "\<Space>"
	" Keep \ leader b/h b/c it still confuses me sometimes. Hopefully tmp
	nmap \ <Leader>
	vmap \ <Leader>
" }}}
" {{{ Vim directory as a variable on unix/win
if has('win32') || has('win64')
	" not necessarily the cannonical Windows vimdir location
	let $VIMHOME = $HOME.'/vimfiles' 
else
	" '.' is a join operator
	let $VIMHOME = $HOME.'/.vim'
endif
" }}}
" {{{ Vundle Plugin Setup 
	" {{{ Preamble
	set nocompatible " required, use vim rather than vi settings
	filetype off     " required

	" Set the runtime path to include Vundle and initialize
	" alternatively, pass a path where Vundle should install plugins
	" eg: call vundle#begin('~/some/path/here')
	set rtp+=$VIMHOME/bundle/Vundle.vim
	call vundle#begin()

	" let Vundle manage Vundle, required
	Plugin 'gmarik/Vundle.vim'   
	" }}}
	" {{{ Plugins
	" Local
	"Plugin 'nikoli-vim-markdown', {'pinned': 1}

	" To try, later, I guess
	"Plugin 'tpope/vim-surround'
	"Plugin 'vyzyv/vimpyter'

	" Utility
	Plugin 'vimwiki/vimwiki'
	Plugin 'tpope/vim-commentary'
	Plugin 'tpope/vim-eunuch' " Sugar for shell commands
	Plugin 'wesQ3/vim-windowswap'
	Plugin 'gioele/vim-autoswap'
	Plugin 'godlygeek/tabular'
	Plugin 'christoomey/vim-titlecase'
	Plugin 'reedes/vim-wheel'

  " Filetypes and Services
	Plugin 'gabrielelana/vim-markdown'
	Plugin 'mrtazz/simplenote.vim'
	Plugin 'mboughaba/i3config.vim'

	" Python
	Plugin 'tmhedberg/SimpylFold'
	Plugin 'vim-scripts/indentpython.vim'

	" Themes, Apperance, Colors
	Plugin 'vim-airline/vim-airline'
	Plugin 'vim-airline/vim-airline-themes'
	Plugin 'ryanoasis/vim-devicons'
	Plugin 'skielbasa/vim-material-monokai'
	Plugin 'jacoborus/tender.vim'
	Plugin 'crusoexia/vim-dracula'
	Plugin 'crusoexia/vim-dream'  

	" Writing prose 
	Plugin 'junegunn/goyo.vim'
	Plugin 'junegunn/limelight.vim' 
	Plugin 'dbmrq/vim-redacted'
	" }}}
" End call {{{
	" All of your Plugins must be added before the following line
	call vundle#end()            " required
	filetype plugin indent on    " required
	" To ignore plugin indent changes, instead use: 'filetype plugin on'
" }}}
" }}} 
" {{{ Bash Folding
" This actually works I can't believe it. Needs to go near top. 
	set foldenable
	set foldmethod=marker
	au FileType sh let g:sh_fold_enabled=5
	au FileType sh let g:is_bash=1
	au FileType sh set foldmethod=syntax
	syntax enable
	" Safeguard. Prevent clobbering highlighting when sourcing vimrc repetedly
	if !exists("g:syntax_on")
		syntax enable
		endif
" }}}
" {{{ Plugin Config
	" vimwiki config {{{
		nmap <Leader>w<Space> <Plug>VimwikiIndex

		" Color header levels
		let g:vimwiki_hl_headers = 1
		
		" Registered wikis, can open by list index w/ [1,2,etc]<Leader>w<Space>
		" What are templates and how do we use them
		let g:vimwiki_list = [
			\{
			\ 'path': '/home/nikoli/vimwiki/wiki-DJG',
			\ 'syntax': 'markdown',
			\ 'ext': '.wiki',
			\ 'path_html': '/home/nikoli/vimwiki/wiki-DJG/site_html/'
			\ },{ 
			\ 'path': '~/vimwiki',
			\ 'syntax': 'markdown',
			\ 'ext': '.wiki',
			\ 'path_html': '~/vimwiki/site_html/'
			\ },{
			\ 'path': '/home/nikoli/Clone/McGill/Courses/NEUR 630/Term Paper/wiki',
			\ 'syntax': 'markdown',
			\ 'ext': '.wiki'
			\ },{
			\ 'path': '/home/nikoli/OneDrive/McGill/Courses/BMDE 508/Grant Proposal/wiki',
			\ 'syntax': 'markdown',
			\ 'ext': '.wiki'
			\ }]

		" Keymaps
		" Oh my god do shift mappings work in terminal now? No.
		:nmap <leader>s <Plug>VimwikiToggleListItem
		:nmap <C-J> <Plug>VimwikiSplitLink
		:nmap <C-V> <Plug>VimwikiVSplitLink

		" Foldmethod, list, expr (headers and sections), syntax
		let g:vimwiki_folding = 'syntax'

		
	" }}}
	" goyo {{{
		let g:goyo_width = 85
		let g:goyo_height = 90
	" }}}
	" gabrielelana/vim-markdown {{{
		let g:markdown_enable_spell_checking = 0
		let g:markdown_enable_conceal = 1
		let g:markdown_mapping_switch_status = '<space>s'
		let g:markdown_drop_empty_blockquotes = 0
	" }}}
	" vim-wheel config{{{
		let g:wheel#map#up='<C-u>'
		let g:wheel#map#down='<C-y>'
	" }}}
	" vim-wordy config {{{
		noremap <silent> <F8> :<C-u>NextWordy<cr>
		xnoremap <silent> <F8> :<C-u>NextWordy<cr>
		inoremap <silent> <F8> <C-o>:NextWordy<cr>
	" }}}
	" vim-redacted config {{{
		"nmap <leader>r <Plug>Redact
		"vmap <leader>r <Plug>Redact
		"nmap <leader>R <Plug>Redact!
		"vmap <leader>R <Plug>Redact!
	" }}}
	" Colorscheme and Theme config {{{
		" toggle italic support for certain colorschemes
		let g:monokai_term_italic = 0
		let g:monokai_gui_italic  = 1
		let g:dream_italic   = 1
		let g:dracula_italic = 1

		" material-monokai
		let g:materialmonokai_italic = 0
		let g:airline_theme = 'materialmonokaiedit'
	" }}}
	" Airline {{{
		let g:airline#extensions#tabline#enabled    = 1
		let g:airline#extensions#whitespace#enabled = 0
		" show functin name + params
		let g:airline#extensions#tagbar#enabled = 1
		let g:airline#extensions#tagbar#flags = 's'

	" }}}
	" Simplenote config {{{
		source $VIMHOME/simplenoterc
		let g:SimplenoteFiletype = "markdown"
		" Single window mode
		let g:SimplenoteSingleWindow = 1
		" open :SimplenoteList either a vs or hs (def) split
		"let g:SimplenoteVertical = 0
		" set scratch buffer to X lines tall. Which ones is the scratch buffer?
		"let g:SimplenoteListHeight=10
	" }}}
	" vim-autoswap {{{
		set title titlestring=
	" }}}
" }}}
" {{{ Terminal/GUI Specific
	if has("gui_running")
		set vb t_vb= "Disable error bell (gvim only)
		
		" Bars--  menubar, toolbar, scrollbar
		" '=' replace    '+=' add    '-=' rm
		set guioptions -=m " menubar 
		set guioptions -=T " toolbar 
		set guioptions -=r
		set guioptions -=L
		
		set guifont=Iosevka\ Term\ Medium:h11
		"set guifont=Source\ Code\ Pro\ for\ Powerline\ Medium\ 10

	else 
		" This is console Vim.
		set noeb vb t_vb= " Disable error bell (vim only)
		
		"" Cursor_config:
		" 1 or 0 -> blinking block
		" 2 -> solid block
		" 3 -> blinking underscore
		" 4 -> solid underscore
		" Recent versions of xterm (282 or above) also support
		" 5 -> blinking vertical bar
		" 6 -> solid vertical bar
		let &t_SI = "\<Esc>[5 q"
		let &t_SR = "\<Esc>[3 q"
		let &t_EI = "\<Esc>[1 q"

	endif
" }}}
" {{{ General Configuration

	" Added for vim-devicons
	set encoding=UTF-8
	" No idea what we're doing re: color support
	set background=dark
	set t_Co=256
	set termguicolors     " enable truecolor support, sometimes...
	colorscheme material-monokai-edit

	set title             " Don't forget what you're editing
	set backspace=2       " backspace in i mode, even tho it's 'suboptimal'
	"set columns=90        " Applies only when wrap is set
	set wrapmargin=8      " unsure why we have this set..
	set number            " Line numbers
	if &tabstop == 8      " Then probs on initial vimrc load, el don't overwrite
		set tabstop=4       " Tab width to 4
		set shiftwidth=4    " indent/outdent by 4
	endif                 " to stop our ts getting messed up when reloading vimrc
	set shiftround        " always indent/outdent to the nearest tabstop
	set smarttab          " use tabs at the start of a line, spaces elsewhere
	set foldmethod=marker " will be overwritten by modelines, ftplugins
	set autoread          " Update file on change. DTEW?
	set scrolloff=5       " Keep 5 lines above and below cursor
	set textwidth=79      " For autoformatting

	" Open planes to right and bottom, feels more natural than default
	set splitbelow
	set splitright

	" Let me hide a buffer even if it is edited/unsaved
	set hidden

	" Handle tab-complete ambiguities like bash. 'wildmode' = 'wim'
	set wildmenu
	set wildmode=longest,list,full

	" Highlight current line and allow toggling
	" Function b/c xml files don't respect our color changes?
	function! ToggleCursorLine()
		hi CursorLineNr guifg=#FF5C57 guibg=NONE ctermbg=NONE
		hi CursorLine guibg=NONE ctermbg=NONE
		set cursorline! " toggle highlight current line
	endfunction
	nnoremap <Leader>C :call ToggleCursorLine()<CR>
	call ToggleCursorLine()
	
	" Spelling
	set spelllang=en
	" Default spellfile. Too add a one-off use 
	" :setlocal spellfile+=.oneoff.utf-8.add
	set spellfile=$HOME/.vim/spell/en.utf-8.add
	hi SpellBad cterm=underline

	" Copy and paste. Holy shit.
	"set clipboard=unnamedplus " automatically use sys clipboard for c/p (linux)
	set clipboard+=unnamed    " automatically use sys clipboard for c/p (win)
	set pastetoggle=<F10> " happier clipboard pasting, but turn off after

	" Search 
	" Use case insensitive search, except when using capital letters
	set ignorecase
	set smartcase
	set incsearch "do incremental searching
	set hlsearch  "highlighting last used search pattern
	" Make redraw screen also clear search highlighting
	nnoremap <C-l> :nohls<CR><C-l> 

	" Softwrap text, except comments. See :h fo-table
	set wrap
	set linebreak
	set nolist 		"list disables linebreak
	"set formatoptions-=t
	set formatoptions=cqlj
	set formatoptions-=o

" }}}
" {{{ Persistent Undo | Backup and Swap 
	" Must make these dirs, vim will not create them!
	" P.Undo: eg going 3 file saves earlier ':early 3f'
	" use ':help clear-undo' to mark milestones/checkpoints
	set backup
	set backupdir=~/.vim-backundoswap/backupfiles
	set undofile " maintain undo history b/t sessions
	set undodir=~/.vim-backundoswap/undofiles
	set dir=~/.vim-backundoswap/swapfiles
" }}}
" Line Return {{{
	augroup line_return
		au!
		au BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\ 	execute 'normal! g`"zvzz' |
			\ endif
	augroup END
" }}}
" {{{ Late Keybindings

	" Hopefully override global <C-j> mapping from vim-latex-suite
	nmap <Leader>j <Plug>IMAP_JumpForward
	nmap <Leader>j <Plug>IMAP_JumpForward

	" Execute current file 
	" should we have a second binding w/o <cr> so that we can run w/ options
	nnoremap <Leader>e :w<CR>:!%:p<CR>
	nnoremap <Leader>E :w<CR>:silent !%:p<CR><C-l>
	nnoremap <Leader>R :!%:p

	" Insert a timestamp, eg for naming meeting minutes
	nmap <F3> i<C-R>=strftime("%Y-%m-%d")<CR><Esc>
	imap <F3> <C-R>=strftime("%Y-%m-%d")<CR>

	" Do this LAST to override any mapping changes from plugins
	"source $VIMHOME/nikoli/date.vim
	source $VIMHOME/colemak.vim

	" switch to alternative buffer
	nnoremap <c-\> <c-^>

	" cd to that of current buffer
	nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

" }}}
set autoindent " This doesn't work early in the file for some reason
""" YOU ARE ALL FREE NOW
